swagger: '2.0'

# Dynamic Coverage Engine 1.0
info:
  version: "2.2.0"
  title: DevFactory TestServer v2 REST API

basePath: /ts/v2
consumes:
 - application/json
produces:
 - application/json

paths:
  /productversions/{product_version_id}/coveragesummary/:
    parameters:
      - $ref: "#/parameters/product_version_id"

    get:
      parameters:
        - $ref: "#/parameters/code_filter"
        - $ref: "#/parameters/code_group_attributes"
      summary: Get a coverage summary based on code filters, optionally grouped by a set of code attributes.
      responses:
        200:
          description: OK
          schema:
            $ref: "dce-model-2.2.0.yaml#/definitions/GroupedCoverageSummary"
        400:
          description: Bad request
        404:
          description: No coverage data for this product version
        default:
          $ref: "#/responses/UnexpectedError"

  /productversions/{product_version_id}/coveragemap/:
    parameters:
      - $ref: "#/parameters/product_version_id"

    get:
      parameters:
        - $ref: "#/parameters/code_filter"
      summary: Get a coverage map based on code filters. Packages will be hierarchical. SourceFileCoverage objects will include the codeAttributes object for the filtered attributes.
      responses:
        200:
          description: OK
          schema:
            $ref: "dce-model-2.2.0.yaml#/definitions/TestRunCoverageBulk"
        400:
          description: Bad request
        404:
          description: No coverage data for this product version
        default:
          $ref: "#/responses/UnexpectedError"

  /productversions/{product_version_id}/asynccoveragemap/:
    parameters:
      - $ref: "#/parameters/product_version_id"

    get:
      parameters:
        - $ref: "#/parameters/code_filter"
      summary: Get a coverage map based on code filters, returning a query ID which can be used to fetch the results incrementally
      responses:
        200:
          description: OK
          schema:
            $ref: "dce-model-2.2.0.yaml#/definitions/AsyncQueryResponse"
        400:
          description: Bad request
        404:
          description: No coverage data for this product version
        default:
          $ref: "#/responses/UnexpectedError"

  /productversions/{product_version_id}/sourcefilecoverage/:
    parameters:
      - $ref: "#/parameters/product_version_id"

    get:
      parameters:
        - $ref: "#/parameters/code_filter"
      summary: Get per-sourcefile coverage based on code filters. The SourceFileCoverage object will include a codeAttributes object for the attributes in the filter.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "dce-model-2.2.0.yaml#/definitions/SourceFileCoverage"
        400:
          description: Bad request
        404:
          description: No coverage data for this product version
        default:
          $ref: "#/responses/UnexpectedError"



# define reusable parameters:
parameters:
  testrun_id:
    name: testrun_id
    in: path
    description: Unique identifier for the Test Run
    type: integer
    format: int32
    required: true
  submission_id:
    name: submission_id
    in: path
    description: Unique identifier for the data submission
    type: integer
    format: int32
    required: true
  paging_page:
    name: page
    in: query
    description: page number for an API that supports pagination
    type: integer
    format: int32
  paging_per_page:
    name: per_page
    in: query
    description: number of items on a page for an API that supports pagination
    type: integer
    format: int32
  product_version_id:
    name: product_version_id
    in: path
    description: Common product version ID
    type: integer
    required: true
  rev:
    name: rev
    in: path
    description: SCM revision as seen in the SCM system (e.g. git hash)
    type: string
    required: true
  code_filter:
    in: query
    name: code_filter
    description: A collection of filter expressions for the code (denominator) of the coverage. The items will be ANDed together. Each item is of the form (property,operator,value). Operators can be =,>,>=,<,<=.
    type: array
    items:
      type: string
    collectionFormat: multi
  code_group_attributes:
    in: query
    name: group_attributes
    description: A list of code attributes by which the resulting coverage should be grouped.
    type: array
    items: 
      type: string
    collectionFormat: csv
  query_id:
    name: query_id
    in: path
    description: Query ID whose results are required
    type: string
    required: true

responses:
  UnexpectedError:
    description: Unexpected Error
    schema:
      $ref: "global-model-2.2.0.yaml#/definitions/ErrorResponse"
  BadRequest:
    description: Bad Request
    schema:
      $ref: "global-model-2.2.0.yaml#/definitions/ErrorResponse"
